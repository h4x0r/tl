name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            executable_suffix: .exe
            artifact_name: tl-windows-x64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            executable_suffix: ""
            artifact_name: tl-linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            executable_suffix: ""
            artifact_name: tl-macos-x64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create artifact directory
      shell: bash
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/tl${{ matrix.executable_suffix }} artifacts/
        cp README.md artifacts/
        cp Cargo.toml artifacts/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: artifacts/

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create zip files
      run: |
        cd artifacts
        for dir in */; do
          zip -r "${dir%/}.zip" "$dir"
        done

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*.zip
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}